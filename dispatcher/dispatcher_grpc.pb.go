// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: dispatcher.proto

package dispatcher

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DispatcherClient is the client API for Dispatcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DispatcherClient interface {
	// Service related bits
	Start(ctx context.Context, in *Service, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Stop(ctx context.Context, in *Service, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Status(ctx context.Context, in *Service, opts ...grpc.CallOption) (*ServiceStatus, error)
	// vinit related operations
	Reload(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StatusAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Dispatcher_StatusAllClient, error)
}

type dispatcherClient struct {
	cc grpc.ClientConnInterface
}

func NewDispatcherClient(cc grpc.ClientConnInterface) DispatcherClient {
	return &dispatcherClient{cc}
}

func (c *dispatcherClient) Start(ctx context.Context, in *Service, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Dispatcher/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispatcherClient) Stop(ctx context.Context, in *Service, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Dispatcher/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispatcherClient) Status(ctx context.Context, in *Service, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/Dispatcher/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispatcherClient) Reload(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Dispatcher/Reload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispatcherClient) StatusAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Dispatcher_StatusAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &Dispatcher_ServiceDesc.Streams[0], "/Dispatcher/StatusAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &dispatcherStatusAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dispatcher_StatusAllClient interface {
	Recv() (*ServiceStatus, error)
	grpc.ClientStream
}

type dispatcherStatusAllClient struct {
	grpc.ClientStream
}

func (x *dispatcherStatusAllClient) Recv() (*ServiceStatus, error) {
	m := new(ServiceStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DispatcherServer is the server API for Dispatcher service.
// All implementations must embed UnimplementedDispatcherServer
// for forward compatibility
type DispatcherServer interface {
	// Service related bits
	Start(context.Context, *Service) (*emptypb.Empty, error)
	Stop(context.Context, *Service) (*emptypb.Empty, error)
	Status(context.Context, *Service) (*ServiceStatus, error)
	// vinit related operations
	Reload(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	StatusAll(*emptypb.Empty, Dispatcher_StatusAllServer) error
	mustEmbedUnimplementedDispatcherServer()
}

// UnimplementedDispatcherServer must be embedded to have forward compatible implementations.
type UnimplementedDispatcherServer struct {
}

func (UnimplementedDispatcherServer) Start(context.Context, *Service) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedDispatcherServer) Stop(context.Context, *Service) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedDispatcherServer) Status(context.Context, *Service) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedDispatcherServer) Reload(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reload not implemented")
}
func (UnimplementedDispatcherServer) StatusAll(*emptypb.Empty, Dispatcher_StatusAllServer) error {
	return status.Errorf(codes.Unimplemented, "method StatusAll not implemented")
}
func (UnimplementedDispatcherServer) mustEmbedUnimplementedDispatcherServer() {}

// UnsafeDispatcherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DispatcherServer will
// result in compilation errors.
type UnsafeDispatcherServer interface {
	mustEmbedUnimplementedDispatcherServer()
}

func RegisterDispatcherServer(s grpc.ServiceRegistrar, srv DispatcherServer) {
	s.RegisterService(&Dispatcher_ServiceDesc, srv)
}

func _Dispatcher_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dispatcher/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherServer).Start(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dispatcher_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dispatcher/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherServer).Stop(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dispatcher_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dispatcher/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherServer).Status(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dispatcher_Reload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherServer).Reload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dispatcher/Reload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherServer).Reload(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dispatcher_StatusAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DispatcherServer).StatusAll(m, &dispatcherStatusAllServer{stream})
}

type Dispatcher_StatusAllServer interface {
	Send(*ServiceStatus) error
	grpc.ServerStream
}

type dispatcherStatusAllServer struct {
	grpc.ServerStream
}

func (x *dispatcherStatusAllServer) Send(m *ServiceStatus) error {
	return x.ServerStream.SendMsg(m)
}

// Dispatcher_ServiceDesc is the grpc.ServiceDesc for Dispatcher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dispatcher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Dispatcher",
	HandlerType: (*DispatcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _Dispatcher_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Dispatcher_Stop_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Dispatcher_Status_Handler,
		},
		{
			MethodName: "Reload",
			Handler:    _Dispatcher_Reload_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StatusAll",
			Handler:       _Dispatcher_StatusAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dispatcher.proto",
}
